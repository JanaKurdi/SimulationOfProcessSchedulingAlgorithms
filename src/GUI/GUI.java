package GUI;

import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.PriorityQueue;
import java.util.Scanner;

/*
 */
public class GUI extends javax.swing.JFrame {

    static int n = 5;//number processes
    static float TotalWaitTime, AverageWaitTime;
    static int[] process = new int[n];
    static int[] Arrival = new int[n];
    static int[] Bu = new int[n];
    static int[] Priority = new int[n];
    static int[] Quantum = new int[n];
    static float[] WaitingTime = new float[n];
    static float TerminationTime[] = new float[10];//Termination Time array

    //string to print information
    static String FCFS = "";
    static String SJF = "";
    static String PriorityStr = "";
    static String RoundRobin = " ";

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jLabel1.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 36)); // NOI18N
        jLabel1.setText("Process Scheduling Algorithem");

        jLabel2.setFont(new java.awt.Font("Apple SD Gothic Neo", 0, 18)); // NOI18N
        jLabel2.setText("Click to the algorithem that you want to perform:");

        jButton1.setBackground(new java.awt.Color(255, 204, 255));
        jButton1.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        jButton1.setText("FCFS");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 204, 255));
        jButton2.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        jButton2.setText("SJF");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 204, 255));
        jButton3.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        jButton3.setText("Priority");
        jButton3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 204, 255));
        jButton4.setFont(new java.awt.Font("Apple SD Gothic Neo", 1, 18)); // NOI18N
        jButton4.setText("Round Robin");
        jButton4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(99, 99, 99))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(34, 34, 34))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74))
        );

        jButton1.getAccessibleContext().setAccessibleParent(this);
        jButton2.getAccessibleContext().setAccessibleParent(this);
        jButton3.getAccessibleContext().setAccessibleParent(this);
        jButton4.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, FCFS);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, SJF);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, PriorityStr);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, RoundRobin);

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        File file = new File("file.txt");
        Scanner input = new Scanner(file);
        //the for loop to read the input from the file and save them into the arrays
        for (int i = 0; i < n; i++) {
            process[i] = input.nextInt();//Process number
            Arrival[i] = input.nextInt();//process arrival time
            Bu[i] = input.nextInt();//process burst time
            Priority[i] = input.nextInt();//process priority
            Quantum[i] = input.nextInt();//Quantum time

        }

//----------------------(FCFS)----------------------
        FCFS += "FCFS processes based on the order of execution are: \n";
        FCFS += ("\n");
        int f;
        float[] B = new float[n];
        for (f = 0; f < n; f++) {
            B[f] = (int) Bu[f];
        }
        //caculate waiting time   
        WaitingTime[0] = 0;
        for (f = 1; f < n; f++) {
            WaitingTime[f] = B[f - 1] + WaitingTime[f - 1];
        }
        //calculate Termination time
        float[] TerminationTime = new float[n];
        for (int i = 0; i < n; i++) {
            TerminationTime[i] = Bu[i] + WaitingTime[i];
        }
        //calculate Turnaround Time
        float[] TurnaroundTime = new float[n];
        for (int i = 0; i < n; i++) {
            TurnaroundTime[i] = Bu[i] + WaitingTime[i];
        }
        //calculate Response Time
        float[] ResponseTime = new float[n];
        for (int i = 0; i < n; i++) {
            ResponseTime[i] = TurnaroundTime[i] - B[i];
        }
        //print process order 
        for (int i = 0; i < n; i++) {
            FCFS += ("       Process -" + process[i] + "- ");
        }
        FCFS += ("\n");
        //print processes details
        FCFS += ("\n The results of these processes respectively are:");
        for (int i = 0; i < n; i++) {
            FCFS += ("\n _________________________");
            FCFS += ("\n Termination time = " + Bu[i] + " + " + WaitingTime[i] + " = " + TerminationTime[i]);
            FCFS += ("\n Response time = " + TurnaroundTime[i] + " - " + B[i] + " = " + ResponseTime[i]);
            FCFS += ("\n Waiting time = " + WaitingTime[i]);
            FCFS += ("\n Turnaround time = " + Bu[i] + " + " + WaitingTime[i] + " = " + TurnaroundTime[i]);

        }

        //----------------------(SJF)----------------------
        SJF += "SJF processes based on the order of execution are: \n";
        SJF += ("\n");
        int h, l, temp;
        int[] B1 = new int[n];
        TotalWaitTime = (float) 0.0;
        float wait[] = new float[n];

        for (h = 0; h < n; h++) {
            B1[h] = (int) Bu[h];
        }
        for (h = n; h >= 1; h--) {
            for (l = 1; l < n; l++) {
                if (B1[l - 1] > B1[l]) {
                    temp = B1[l - 1];
                    B1[l - 1] = B1[l];
                    B1[l] = temp;
                }
            }
        }
        //caculate waiting time 
        wait[0] = 0;
        for (h = 1; h < n; h++) {
            wait[h] = B1[h - 1] + wait[h - 1];
        }

        float TerminationTime0 = 0;
        for (int y = 0; y < n; y++) {
            TerminationTime0 = TerminationTime0 + WaitingTime[y];
        }
        //calculate Turnaround Time
        float[] TurnaroundTime2 = new float[n];
        for (int i = 0; i < n; i++) {
            TurnaroundTime2[i] = B1[i] + wait[i];
        }
        //calculate Termination time
        float[] TerminationTime2 = new float[n];
        for (int i = 0; i < n; i++) {
            TerminationTime2[i] = B1[i] + wait[i];
        }
        //calculate Response time
        float[] ResponseTime2 = new float[n];
        for (int i = 0; i < n; i++) {
            ResponseTime2[i] = TurnaroundTime2[i] - B1[i];
        }

        //print processes in order
        int p[] = new int[n];
        int counter = 0;
        for (int i = 0; i < TerminationTime0; i++) {
            for (int j = 0; j < n; j++) {
                if (Bu[j] == i) {

                    SJF += ("      Process -" + process[j] + "- ");

                    p[counter] = process[j];
                    counter++;
                }

            }
        }
        SJF += ("\n");
        SJF += ("\n The results of these processes respectively are:");
        //print processes details 
        for (int i = 0; i < n; i++) {
            SJF += ("\n _________________________");
            SJF += ("\n Termination time = " + B1[i] + " + " + wait[i] + " = " + TerminationTime2[i]);
            SJF += ("\n Response time = " + TurnaroundTime2[i] + "-" + B1[i] + " = " + ResponseTime2[i]);
            SJF += ("\n Waiting time = " + wait[i]);
            SJF += ("\n Turnaround time = " + B1[i] + " + " + wait[i] + " = " + TurnaroundTime2[i]);
        }

        //---------------------- (Priority) ----------------------
        PriorityStr += "Priority processes based on the order of execution are:\n";
        PriorityStr += ("\n");
        PriorityQueue<Integer> pQueue = new PriorityQueue<>();
        //these are local arrays and variables
        int y, m;
        int[] B2 = new int[n];
        int[] P = new int[n];
        float w1 = (float) 0.0;
        int max;
        TotalWaitTime = (float) 0.0;
        max = 1;
        //array to store processes order by priority
        int[] processesPriority = new int[n];
        for (int i = 0; i < n; i++) {
            pQueue.add(Priority[i]);
            processesPriority[i] = i;
        }

        for (y = 0; y < n; y++) {
            B2[y] = (int) Bu[y];  //copying the burst time into the local array
            P[y] = Priority[y];
            if (max < P[y]) {
                max = P[y];
            }
        }
        m = 0;

        while (m <= max) {
            y = 0;
            //caculate waiting time 
            while (y < n) {
                if (P[y] == m) {
                    WaitingTime[y] = w1;
                    w1 = w1 + B2[y];
                }
                y++;

            }
            m++;
        }
        //calculate Termination time
        float[] TerminationTime3 = new float[n];
        for (int i = 0; i < n; i++) {
            TerminationTime3[i] = B2[i] + WaitingTime[i];
        }
        //calculate Turnaround Time
        float[] TurnaroundTime3 = new float[n];
        for (int i = 0; i < n; i++) {
            TurnaroundTime3[i] = Bu[i] + WaitingTime[i];
        }
        //calculate Response Time
        float[] ResponseTime3 = new float[n];
        for (int i = 0; i < n; i++) {
            ResponseTime3[i] = TurnaroundTime3[i] - B2[i];
        }
        //print processes in order
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (Priority[j] == i) {
                    PriorityStr += ("      Process -" + process[j] + "- ");
                }
            }
        }
        PriorityStr += ("\n");
        //print processes details  
        PriorityStr += ("\n The results of these processes respectively are:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (Priority[j] == i) {
                    PriorityStr += ("\n _________________________");
                    PriorityStr += ("\n Termination time = " + B2[j] + " + " + WaitingTime[j] + " = " + TerminationTime3[j]);
                    PriorityStr += ("\n Response time = " + TurnaroundTime3[j] + " - " + B2[i] + " = " + ResponseTime3[j]);
                    PriorityStr += ("\n Waiting time = " + WaitingTime[j]);
                    PriorityStr += ("\n Turnaround time = " + Bu[j] + " + " + WaitingTime[j] + " = " + TurnaroundTime3[j]);
                }
            }
        }
        //---------------------- (RR) ----------------------    
        RoundRobin += "Round Robin processes based on the order of execution are:\n";
        RoundRobin += ("\n");
        int i, j, tq = 0, k;
        float[] B3 = new float[n];
        float[][] Rrobin = new float[n][n];
        int[] count = new int[n];
        int max1 = 0;
        int m2;
        float Twt = (float) 0.0;

        for (i = 0; i < n; i++) {
            B3[i] = Bu[i];
            if (max1 < B3[i]) {
                max1 = (int) B3[i];
            }
            WaitingTime[i] = 0;
        }
        for (i = 0; i < n; i++) {
            RoundRobin += ("      Process -" + process[i] + "- ");
        }
        for (i = 0; i < n; i++) {
            tq = Quantum[i];
            if (Bu[i] - tq > 0) {
                m2 = Bu[i] - tq;
                Bu[i] = Bu[i] - m2;
                RoundRobin += ("      Process -" + process[i] + "- ");
                if (m2 - tq > 0) {
                    RoundRobin += ("      Process -" + process[i] + "- ");
                }
            } else {
                m2 = Bu[i];
                Bu[i] = m2;
            }
        }
        RoundRobin += ("\n");


            //caculate waiting time   
            WaitingTime[0] = 0;
            for (f = 1; f < n; f++) {
                WaitingTime[f] = Bu[f - 1] + WaitingTime[f - 1];
            }
            //calculate Termination time
            float[] TerminationTime4 = new float[n];
            for (i = 0; i < n; i++) {
                TerminationTime4[i] = Bu[i] + WaitingTime[i];
            }
            //calculate Turnaround Time
            float[] TurnaroundTime4 = new float[n];
            for (i = 0; i < n; i++) {
                TurnaroundTime4[i] = Bu[i] + WaitingTime[i];
            }
            //calculate Response Time
            float[] ResponseTime4 = new float[n];
            for (i = 0; i < n; i++) {
                ResponseTime4[i] = TurnaroundTime4[i] - Bu[i];
            }

            //print processes details  
            RoundRobin += ("\n The results of these processes respectively are:");
            for (i = 0; i < n; i++) {
                RoundRobin += ("\n _________________________");
                RoundRobin += ("\n Termination time = " + Bu[i] + " + " + WaitingTime[i] + " = " + TerminationTime4[i]);
                RoundRobin += ("\n Response time = " + TurnaroundTime4[i] + " - " + Bu[i] + " = " + ResponseTime4[i]);
                RoundRobin += ("\n Waiting time = " + WaitingTime[i]);
                RoundRobin += ("\n Turnaround time = " + Bu[i] + " + " + WaitingTime[i] + " = " + TurnaroundTime4[i]);
            }

        
  
            
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
            //</editor-fold>

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new GUI().setVisible(true);
                }
            });
        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
